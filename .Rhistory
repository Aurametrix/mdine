tmp.char = matrix(c("A","B","C","D"),2,2)
tmp.char
is.integer(tmp.char)
any(tmp<0)
roxygen2::roxygenise(clean=TRUE)
devtools::install(local=TRUE, args = c('--no-lock'))
library(mdine)
tmp
mdine(tmp,tmp,tmp)
tmp = matrix(rpois(100), 50, 2)
tmp = matrix(rpois(100, 10), 50, 2)
tmp
tmp[50,1] = -1
tmp
mdine(tmp,tmp,tmp)
tmp = matrix(rpois(100, 10), 50, 2)
mdine(tmp,tmp,tmp)
mdine(tmp,tmp,c(1,2,3))
mdine(tmp,tmp,c(1,0,1))
mdine(tmp,tmp,c(1,0,1))
roxygen2::roxygenise(clean=TRUE)
devtools::install(local=TRUE, args = c('--no-lock'))
library(mdine)
mdine(tmp,tmp,c(1,0,1))
mdine(tmp,tmp,rep(1, 50))
mdine(tmp,matrix(-1,50,2),rep(1, 50))
mdine(tmp,matrix(-1,49,2),rep(1, 50))
NULL<0
if(NULL<0) print("x")
roxygen2::roxygenise(clean=TRUE)
devtools::install(local=TRUE, args = c('--no-lock'))
warning("asldkfha")
library(mdine)
mdine(tmp[-2,],matrix(-1,50,2),rep(1, 50))
mdine(tmp,matrix(-1,50,2),rep(1, 50), lambda=0)
mdine(tmp,matrix(-1,50,2),rep(1, 50), lambda=-1)
mdine(tmp,matrix(-1,50,2),rep(1, 50), lambda=1)
mdine(tmp,matrix(-1,50,2),rep(1, 50), lambda=0.0000001)
x = NULL
if (!is.null(x) | x<0) print(x)
if (!is.null(x) || x<0) print(x)
if (!is.null(x) && x<0) print(x)
if (is.null(x) || x<0) print(x)
if (is.null(x) || x<0) stop("x must be positive")
if (!is.null(x) || x<0) stop("x must be positive")
func = function(x=c("a","b")) { print(x) }
func()
func = function(x=c("a","b")) { x<-match.arg(x); print(x) }
func()
func("a")
func("b")
func("c")
roxygen2::roxygenise(clean=TRUE)
devtools::install(local=TRUE, args = c('--no-lock'))
library(mdine)
?mdine
?mdine
library(mdine)
?mdine
?lm
library(compositions)
?clr
roxygen2::roxygenise(clean=TRUE)
devtools::install(local=TRUE, args = c('--no-lock'))
?ginv
?MASS::ginv
roxygen2::roxygenise(clean=TRUE)
devtools::install(local=TRUE, args = c('--no-lock'))
roxygen2::roxygenise(clean=TRUE)
devtools::install(local=TRUE, args = c('--no-lock'))
roxygen2::roxygenise(clean=TRUE)
devtools::install(local=TRUE, args = c('--no-lock'))
load("/mnt/GREENWOOD_SCRATCH/kevin.mcgregor/stan_multinom_normal/sim_study_data/n50_otu5_p3/sim_data/sim_rep1.RData")
devtools::install(local=TRUE, args = c('--no-lock'))
devtools::install(local=TRUE, args = c('--no-lock'))
mod = mdine(counts_cc, covars, status, mc.cores=4)
library(mdine)
mod = mdine(counts_cc, covars, status, mc.cores=4)
devtools::install(local=TRUE, args = c('--no-lock'))
library(mdine)
mod = mdine(counts_cc, covars, status, mc.cores=4)
devtools::install(local=TRUE, args = c('--no-lock'))
devtools::install(local=TRUE, args = c('--no-lock'))
library(mdine)
mod = mdine(counts_cc, covars, status, mc.cores=4)
devtools::install(local=TRUE, args = c('--no-lock'))
library(mdine)
mod = mdine(counts_cc, covars, status, mc.cores=4)
mod$post_mean
mod$stan.fit
load("/mnt/GREENWOOD_SCRATCH/kevin.mcgregor/stan_multinom_normal/sim_study_data/n500_otu25_p3/sim_data/sim_rep1.RData")
mod = mdine(counts_cc, covars, status, mc.cores=4)
load("/mnt/GREENWOOD_SCRATCH/kevin.mcgregor/stan_multinom_normal/sim_study_data/n50_otu5_p3/sim_data/sim_rep1.RData")
mod = mdine(counts_cc, covars, status, mc.cores=4)
gc()
roxygen2::roxygenise(clean=TRUE)
devtools::install(local=TRUE, args = c('--no-lock'))
library(mdine)
load("/mnt/GREENWOOD_SCRATCH/kevin.mcgregor/stan_multinom_normal/sim_study_data/n50_otu5_p3/sim_data/sim_rep1.RData")
?mdine
roxygen2::roxygenise(clean=TRUE)
devtools::install(local=TRUE, args = c('--no-lock'))
?mdine
library(mdine)
?mdine
library(glasso)
?glasso
roxygen2::roxygenise(clean=TRUE)
devtools::install(local=TRUE, args = c('--no-lock'))
load("/mnt/GREENWOOD_SCRATCH/kevin.mcgregor/stan_multinom_normal/sim_study_data/n50_otu5_p3/sim_data/sim_rep1.RData")
library(mdine)
mod = mdine(counts_cc, covars, status, mc.cores=4)
?match.arg
devtools::build()
library(mdine)
?get_posterior_mean
?rstan::get_posterior_mean
library(rstan)
?get_posterior_mean
taco$beta = 1
taco=NULL
taco$beta = 1
taco
load("/mnt/GREENWOOD_SCRATCH/kevin.mcgregor/stan_multinom_normal/sim_study_data/n100_otu5_p3/lam_mle_diag/stan_file1.RData")
get_posterior_mean(stan.model.lam.est, pars="beta")
get_posterior_mean(stan.model.lam.est$stan.fit, pars="beta")
get_posterior_mean(stan.model.lam.est$stan.fit, pars="beta")[,"mean-all chains"]
matrix(get_posterior_mean(stan.model.lam.est$stan.fit, "beta")[,"mean-all chains"], p, k, byrow=TRUE)
matrix(get_posterior_mean(stan.model.lam.est$stan.fit, "beta")[,"mean-all chains"], 4, 5, byrow=TRUE)
stan.model.lam.est$stan.fit$n
par_dims(stan.model.lam.est)
stan.model.lam.est$stan.fit$par_dims
stan.model.lam.est$stan.fit@par_dims
stan.model.lam.est$stan.fit@mode
stan.model.lam.est$stan.fit@sim
as.matrix(stan.model.lam.est$stan.fit, pars="beta")
as.matrix(get_posterior_mean(stan.model.lam.est$stan.fit, pars="beta"))
roxygen2::roxygenise(clean=TRUE)
devtools::install(local=TRUE, args = c('--no-lock'))
library(mdine)
load("/mnt/GREENWOOD_SCRATCH/kevin.mcgregor/stan_multinom_normal/sim_study_data/n50_otu5_p3/sim_data/sim_rep1.RData")
mod = mdine(counts_cc, covars, status, mc.cores = 4, iter = 50)
roxygen2::roxygenise(clean=TRUE)
devtools::install(local=TRUE, args = c('--no-lock'))
library(mdine)
mod = mdine(counts_cc, covars, status, mc.cores = 4, iter = 50)
mod$post_mean
traceplot(mod$stan.fit, pars="beta")
traceplot(mod$stan.fit, pars="beta[1,1]", inc_warmup=TRUE)
mod = mdine(counts_cc, covars, status, mc.cores = 4, iter = 500)
traceplot(mod$stan.fit, pars="beta[1,1]", inc_warmup=TRUE)
summary(mod$stan.fit, pars="beta[1,1]")$summary
summary(mod$stan.fit, pars="beta")$summary
summary(mod$stan.fit, pars="invsigma0")$summary
?mdine
?mdine
library(mdine)
?mdine
mdine::mn_model
roxygen2::roxygenise(clean=TRUE)
devtools::install(local=TRUE, args = c('--no-lock'))
library(mdine)
?mdine
roxygen2::roxygenise(clean=TRUE)
devtools::install(local=TRUE, args = c('--no-lock'))
library(mdine)
?mdine
library(mdine)
?mdine
missing(ligdv)
?summary
?summary.stanfit
?get_posterior_mean
load("/mnt/GREENWOOD_SCRATCH/kevin.mcgregor/stan_multinom_normal/sim_study_data/n50_otu5_p3/lam_mle_diag/stan_file1.RData")
summary(stan.model.lam.est$stan.fit, pars="beta", probs=c(0.1,0.9))
library(rstan)
summary(stan.model.lam.est$stan.fit, pars="beta", probs=c(0.1,0.9))
summary(stan.model.lam.est$stan.fit, pars="beta")
summary(stan.model.lam.est$stan.fit, pars="beta", probs=c(0.1,0.9))$summary
summary(stan.model.lam.est$stan.fit, pars="beta", probs=c(0.123,0.911))$summary
quant = c(0.1, 0.9)
quant*100
as.character(quant*100)
paste0(as.character(quant*100),"%")
summary(stan.model.lam.est$stan.fit, pars="beta", probs=quant)$summary[,paste0(as.character(quant*100),"%")]
exp(0.001)
roxygen2::roxygenise(clean=TRUE)
devtools::install(local=TRUE, args = c('--no-lock'))
library(mdine)
load("/mnt/GREENWOOD_SCRATCH/kevin.mcgregor/stan_multinom_normal/sim_study_data/n50_otu5_p3/lam_mle_diag/stan_file1.RData")
mod = mdine(counts_cc, covars, status, mc.cores = 4, iter = 50)
rm(stan.model.lam.est)
load("/mnt/GREENWOOD_SCRATCH/kevin.mcgregor/stan_multinom_normal/sim_study_data/n50_otu5_p3/sim_data/sim_rep1.RData")
mod = mdine(counts_cc, covars, status, mc.cores = 4, iter = 50)
mod$ci
mod
roxygen2::roxygenise(clean=TRUE)
devtools::install(local=TRUE, args = c('--no-lock'))
library(mdine)
load("/mnt/GREENWOOD_SCRATCH/kevin.mcgregor/stan_multinom_normal/sim_study_data/n50_otu5_p3/lam_mle_diag/stan_file1.RData")
mod = mdine(counts_cc, covars, status, mc.cores = 4, iter = 50)
rm(stan.model.lam.est)
load("/mnt/GREENWOOD_SCRATCH/kevin.mcgregor/stan_multinom_normal/sim_study_data/n50_otu5_p3/sim_data/sim_rep1.RData")
mod = mdine(counts_cc, covars, status, mc.cores = 4, iter = 50)
roxygen2::roxygenise(clean=TRUE)
devtools::install(local=TRUE, args = c('--no-lock'))
library(mdine)
mod = mdine(counts_cc, covars, status, mc.cores = 4, iter = 50)
roxygen2::roxygenise(clean=TRUE)
devtools::install(local=TRUE, args = c('--no-lock'))
mod = mdine(counts_cc, covars, status, mc.cores = 4, iter = 50)
roxygen2::roxygenise(clean=TRUE)
devtools::install(local=TRUE, args = c('--no-lock'))
library(mdine)
load("/mnt/GREENWOOD_SCRATCH/kevin.mcgregor/stan_multinom_normal/sim_study_data/n50_otu5_p3/sim_data/sim_rep1.RData")
mod = mdine(counts_cc, covars, status, mc.cores = 4, iter = 50)
mod$post_mean
mod$ci$beta
mod$post_mean$beta
mod$post_mean$invsigma0
mod$ci$invsigma0
mod$ci$invsigma1
eigen(mod$ci$invsigma1$upper)$values
eigen(mod$ci$invsigma0$upper)$values
mod$ci$invsigma_diff
mod$ci$lambda
mod$post_mean$lambda
log2(lambda)
log2(mod$post_mean$lambda)
mod$ci$frob
mod$ci$natcon
load("/mnt/GREENWOOD_SCRATCH/kevin.mcgregor/stan_multinom_normal/sim_study_data/n50_otu5_p3/lam_mle_diag/stan_file1.RData")
get_post_mean_matrix <- function(stan.fit, par) {
dim <- stan.fit@par_dims[[par]]
param_mean <- matrix(rstan::get_posterior_mean(stan.fit, par)[,"mean-all chains"],
dim[1], dim[2], byrow=TRUE)
return(param_mean)
}
get_post_mean_matrix(stan.model.lam.est$stan.fit, par="beta")
get_post_mean_matrix(stan.model.lam.est$stan.fit, par="invsigma0")
get_post_mean_matrix(stan.model.lam.est$stan.fit, par="invsigma1")
get_post_mean_matrix(stan.model.lam.est$stan.fit, par="w")
get_post_mean_matrix(stan.model.lam.est$stan.fit, par="lin_pred_ran")
get_post_mean_matrix(stan.model.lam.est$stan.fit, par="lin_pred_rand")
test = c("a","b","c")
text
test
as.list(test)
list(test)
extract_post_mean <- function(stan.fit, lam.null) {
pars <- c("beta", "invsigma0", "invsigma1", "invsigma_diff", "w", "lin_pred_rand", "probs",
"frob", "natcon")
post_mean <- vector("list", length(pars))
names(post_mean) <- pars
post_mean$lambda <- NULL
if (lam.null) {
pars <- c(pars, lambda)
}
for (par in pars) {
post_mean[[par]] <- get_post_mean_matrix(stan.fit, par)
}
return(post_mean)
}
extract_post_mean(stan.model.lam.est$stan.fit, lam.null=TRUE)
extract_post_mean <- function(stan.fit, lam.null) {
pars <- c("beta", "invsigma0", "invsigma1", "invsigma_diff", "w", "lin_pred_rand", "probs",
"frob", "natcon")
post_mean <- vector("list", length(pars))
names(post_mean) <- pars
post_mean$lambda <- NULL
if (lam.null) {
pars <- c(pars, "lambda")
}
for (par in pars) {
post_mean[[par]] <- get_post_mean_matrix(stan.fit, par)
}
return(post_mean)
}
extract_post_mean(stan.model.lam.est$stan.fit, lam.null=TRUE)
extract_post_mean <- function(stan.fit, lam.null) {
pars <- c("beta", "invsigma0", "invsigma1", "invsigma_diff", "lin_pred_rand", "probs",
"frob", "natcon")
post_mean <- vector("list", length(pars))
names(post_mean) <- pars
post_mean$lambda <- NULL
if (lam.null) {
pars <- c(pars, "lambda")
}
for (par in pars) {
post_mean[[par]] <- get_post_mean_matrix(stan.fit, par)
}
return(post_mean)
}
extract_post_mean(stan.model.lam.est$stan.fit, lam.null=TRUE)
source('/mnt/GREENWOOD_JBOD1/GREENWOOD_BACKUP/home/kevin.mcgregor/my_packages/mdine/R/extract_post_mean.R', echo=TRUE)
extract_post_mean(stan.model.lam.est$stan.fit, lam.null=TRUE)
load("/mnt/GREENWOOD_SCRATCH/kevin.mcgregor/stan_multinom_normal/sim_study_data/n50_otu5_p3/lam_mle_diag/stan_file1.RData")
source('/mnt/GREENWOOD_JBOD1/GREENWOOD_BACKUP/home/kevin.mcgregor/my_packages/mdine/R/extract_post_mean.R', echo=TRUE)
test = extract_post_mean(stan.model.lam.est$stan.fit, TRUE)
test
matrix(1.2,1,1)
as.numeric(matrix(1.2,1,1))
get_post_mean_matrix <- function(stan.fit, par) {
dim <- stan.fit@par_dims[[par]]
if (is.na(dim[1])) dim <- c(1,1)
param_mean <- matrix(rstan::get_posterior_mean(stan.fit, par)[,"mean-all chains"],
dim[1], dim[2], byrow=TRUE)
if (dim==c(1,1)) param_mean <- as.numeric(param_mean)
return(param_mean)
}
test = extract_post_mean(stan.model.lam.est$stan.fit, TRUE)
t = c(1,1)
t == c(1,1)
all(t == c(1,1))
get_post_mean_matrix <- function(stan.fit, par) {
dim <- stan.fit@par_dims[[par]]
if (is.na(dim[1])) dim <- c(1,1)
param_mean <- matrix(rstan::get_posterior_mean(stan.fit, par)[,"mean-all chains"],
dim[1], dim[2], byrow=TRUE)
if (all(dim==c(1,1))) param_mean <- as.numeric(param_mean)
return(param_mean)
}
test = extract_post_mean(stan.model.lam.est$stan.fit, TRUE)
text
test
get_post_mean_matrix <- function(stan.fit, par) {
dim <- stan.fit@par_dims[[par]]
if (is.na(dim[1])) {
param_mean <- rstan::get_posterior_mean(stan.fit, par)[,"mean-all chains"]
} else {
param_mean <- matrix(rstan::get_posterior_mean(stan.fit, par)[,"mean-all chains"],
dim[1], dim[2], byrow=TRUE)
}
return(param_mean)
}
test = extract_post_mean(stan.model.lam.est$stan.fit, TRUE)
test
summary(stan.model.lam.est$stan.fit, "lambda")
library(rstan)
summary(stan.model.lam.est$stan.fit, "lambda")
summary(stan.model.lam.est$stan.fit, "lambda")$summary
summary(stan.model.lam.est$stan.fit, "lambda")$summary[1,"50%"]
get_ci_stanfit <- function(stan.fit, par, quant=c(0.025, 0.975)) {
col <- 4:(3+length(quant))
param_smry <- rstan::summary(stan.fit, pars=par, probs=quant)$summary[,col]
dim <- stan.fit@par_dims[[par]]
if (is.na(dim[1])) {
ret <- rep(0, length(quant))
} else {
ret <- vector("list", length(quant))
}
names(ret) <- paste0(100*quant, "%")
for (q in 1:length(quant)) {
if (is.na(dim[1])) {
ret[q] <- param_smry[1,q]
} else {
ret[[q]] <- matrix(param_smry[,q], dim[1], dim[2])
}
}
return(ret)
}
get_ci_stanfit(stan.model.lam.est$stan.fit, "invsigma0")
get_ci_stanfit(stan.model.lam.est$stan.fit, "lambda")
get_ci_stanfit <- function(stan.fit, par, quant=c(0.025, 0.975)) {
col <- 4:(3+length(quant))
param_smry <- rstan::summary(stan.fit, pars=par, probs=quant)$summary[,col]
dim <- stan.fit@par_dims[[par]]
print(param_smry)
if (is.na(dim[1])) {
ret <- rep(0, length(quant))
} else {
ret <- vector("list", length(quant))
}
names(ret) <- paste0(100*quant, "%")
for (q in 1:length(quant)) {
if (is.na(dim[1])) {
ret[q] <- param_smry[1,q]
} else {
ret[[q]] <- matrix(param_smry[,q], dim[1], dim[2])
}
}
return(ret)
}
get_ci_stanfit(stan.model.lam.est$stan.fit, "lambda")
get_ci_stanfit <- function(stan.fit, par, quant=c(0.025, 0.975)) {
col <- 4:(3+length(quant))
param_smry <- rstan::summary(stan.fit, pars=par, probs=quant)$summary[,col]
dim <- stan.fit@par_dims[[par]]
if (!is.na(dim[1])) {
ret <- vector("list", length(quant))
names(ret) <- paste0(100*quant, "%")
for (q in 1:length(quant)) {
ret[[q]] <- matrix(param_smry[,q], dim[1], dim[2])
}
} else {
ret <- param_smry
}
return(ret)
}
get_ci_stanfit(stan.model.lam.est$stan.fit, "lambda")
get_ci_stanfit(stan.model.lam.est$stan.fit, "invsigma0")
get_ci_stanfit(stan.model.lam.est$stan.fit, "beta")
extract_ci <- function(stan.fit,lam.null,quant) {
pars <- c("beta", "invsigma0", "invsigma1", "invsigma_diff", "lin_pred_rand", "probs",
"frob", "natcon")
ci <- vector("list", length(pars))
names(ci) <- pars
ci$lambda <- NULL
if (lam.null) {
pars <- c(pars, "lambda")
}
for (par in pars) {
ci[[par]] <- get_ci_stanfit(stan.fit, par, quant)
}
return(ci)
}
extract_ci <- function(stan.fit,lam.null,quant=c(0.025, 0.975)) {
pars <- c("beta", "invsigma0", "invsigma1", "invsigma_diff", "lin_pred_rand", "probs",
"frob", "natcon")
ci <- vector("list", length(pars))
names(ci) <- pars
ci$lambda <- NULL
if (lam.null) {
pars <- c(pars, "lambda")
}
for (par in pars) {
ci[[par]] <- get_ci_stanfit(stan.fit, par, quant)
}
return(ci)
}
test = extract_ci(stan.model.lam.est$stan.fit, TRUE)
test
source('/mnt/GREENWOOD_JBOD1/GREENWOOD_BACKUP/home/kevin.mcgregor/my_packages/mdine/R/extract_post_mean.R', echo=TRUE)
source('/mnt/GREENWOOD_JBOD1/GREENWOOD_BACKUP/home/kevin.mcgregor/my_packages/mdine/R/mdine.R', echo=TRUE)
load("/mnt/GREENWOOD_SCRATCH/kevin.mcgregor/stan_multinom_normal/sim_study_data/n50_otu5_p3/sim_data/sim_rep1.RData")
mn = mdine(counts_cc, covars, status, mc.cores=4)
source('/mnt/GREENWOOD_JBOD1/GREENWOOD_BACKUP/home/kevin.mcgregor/my_packages/mdine/R/get_lam_mle.R', echo=TRUE)
mn = mdine(counts_cc, covars, status, mc.cores=4)
source('/mnt/GREENWOOD_JBOD1/GREENWOOD_BACKUP/home/kevin.mcgregor/my_packages/mdine/R/mn_model.R', echo=TRUE)
mn = mdine(counts_cc, covars, status, mc.cores=4)
library(mdine)
source('/mnt/GREENWOOD_JBOD1/GREENWOOD_BACKUP/home/kevin.mcgregor/my_packages/mdine/R/extract_post_mean.R', echo=TRUE)
mn = mdine(counts_cc, covars, status, mc.cores=4)
library(mdine)
mn = mdine(counts_cc, covars, status, mc.cores=4)
gc()
roxygen2::roxygenise(clean=TRUE)
devtools::install(local=FALSE)
devtools::install(local=FALSE, INSTALL_opts="--no-lock")
?devtools::install
devtools::install(local=FALSE, args="--no-lock")
library(mdine)
mn = mdine(counts_cc, covars, status, mc.cores=4)
load("/mnt/GREENWOOD_SCRATCH/kevin.mcgregor/stan_multinom_normal/sim_study_data/n50_otu5_p3/sim_data/sim_rep1.RData")
mn = mdine(counts_cc, covars, status, mc.cores=4)
mn$post_mean
mn$ci
?mdine
?mdine
?mdine::mdine
.libPaths()
?devtools::install
roxygen2::roxygenise(clean=TRUE)
devtools::install(local=FALSE, args="--no-lock")
roxygen2::roxygenise(clean=TRUE)
roxygen2::roxygenise(clean=TRUE)
roxygen2::roxygenise(clean=TRUE)
devtools::install(local=FALSE, args="--no-lock")
roxygen2::roxygenise(clean=TRUE)
devtools::install(local=FALSE, args="--no-lock")
roxygen2::roxygenise(clean=TRUE)
devtools::install(local=FALSE, args="--no-lock")
library(rstantools)
rstantools::posterior_interval()
rstantools::posterior_interval
?rstantools::posterior_interval
remove.packages("mdine")
roxygen2::roxygenise(clean=TRUE)
devtools::install(local=FALSE, args="--no-lock")
library(mdine)
?mdine
devtools::install(local=FALSE, args="--no-lock")
devtools::install(local=FALSE, args="--no-lock")
devtools::install(local=FALSE, args="--no-lock")
devtools::install(local=FALSE, args="--no-lock")
set.seed(893497)
n=50
n.spec = 5
x = cbind(1, rbinom(n, 1, 0.5))
w = matrix(rnorm(n*n.spec), n, n.spec)
beta = rbind(c(5, 4, 3, 2, 1), c(-1, 1, 0, 1, 2))
exp_part = cbind(exp(x%*%beta+w), 1)
probs = exp_part/rowSums(exp_part)
rd = floor(rnorm(n, 50000, 5000))
counts = matrix(0, n, n.spec+1)
for (i in 1:n) {
counts[i,] = rmultinom(1, rd[i], probs[i,])
}
library(mdine)
md_test = mdine(Y = counts, X = x, Z = x[,2], mc.cores = 4, iter = 500)
md_test$post_mean$beta
md_test$post_mean$invsigma0
md_test$post_mean$lambda
eigen(diag(rpois(10, 50)))
mateigen(diag(rpois(10, 50)))
mat = eigen(diag(rpois(10, 50)))
mat
mat = diag(rpois(10, 50))
mat
log(mean(exp(eigen)))
log(mean(exp(eigen$values)))
log(mean(exp(eigen(mat)$values)))
