getwd()
file.show("DESCRIPTION")
roxygen2::roxygenise(clean=TRUE)
roxygen2::roxygenise(clean=TRUE)
library(mdine)
devtools::install(local=FALSE)
fit <- lm_stan(y = rnorm(10), x = rnorm(10), iter = 500)
fit
devtools::install(local=FALSE)
?install.packages
devtools::install(local=FALSE, INSTALL_opts = "--no-lock")
devtools::install(local=FALSE, INSTALL_opts = c('--no-lock'))
?devtools::install
devtools::install(local=FALSE, args = c('--no-lock'))
library(mdine)
devtools::install(local=FALSE, args = c('--no-lock'))
library(mdine)
file.remove('Read-and-delete-me')
cd ..
devtools::install(local=FALSE, args = c('--no-lock'))
library(mdine)
roxygen2::roxygenise(clean=TRUE)
roxygen2::roxygenise(clean=TRUE)
devtools::install(local=FALSE, args = c('--no-lock'))
library(mdine)
library("mdine", lib.loc="/mnt/GREENWOOD_JBOD1/GREENWOOD_SCRATCH/Rlibs/kevin.mcgregor.R.3.2.2")
detach("package:mdine", unload=TRUE)
library("mdine", lib.loc="/mnt/GREENWOOD_JBOD1/GREENWOOD_SCRATCH/Rlibs/kevin.mcgregor.R.3.2.2")
mn_model()
roxygen2::roxygenise(clean=TRUE)
devtools::install(local=FALSE, args = c('--no-lock'))
library("mdine", lib.loc="/mnt/GREENWOOD_JBOD1/GREENWOOD_SCRATCH/Rlibs/kevin.mcgregor.R.3.2.2")
?mdine
library("mdine", lib.loc="/mnt/GREENWOOD_JBOD1/GREENWOOD_SCRATCH/Rlibs/kevin.mcgregor.R.3.2.2")
?mdine
?mn_model
?rstan::sampling
roxygen2::roxygenise(clean=TRUE)
roxygen2::roxygenise(clean=TRUE)
devtools::install(local=FALSE, args = c('--no-lock'))
library(mdine)
?mdine
library(mdine)
?mdine
?mdine::mdine
?mdine-package
?mdine
roxygen2::roxygenise(clean=TRUE)
roxygen2::roxygenise(clean=TRUE)
devtools::install(local=FALSE, args = c('--no-lock'))
library(mdine)
roxygen2::roxygenise(clean=TRUE)
roxygen2::roxygenise(clean=TRUE)
devtools::install(local=FALSE, args = c('--no-lock'))
library(mdine)
?mdine
library(mdine)
?mdine
?MInt
library(MInt)
?MInt
detach("package:MInt", unload=TRUE)
tmp = matrix(0, 2,2)
tmp
is.numeric_tmp
is.numeric(tmp)
is.matrix(tmp)
is.numeric.matrix(tmp)
tmp = matrix(rpois(100, 45), 50,2)
tmp
is.integer(Y)
is.integer(tmp)
tmp[50,2] = 0.5
tmp
is.integer(tmp)
tmp.char = matrix(c("A","B","C","D"),2,2)
tmp.char
is.integer(tmp.char)
any(tmp<0)
roxygen2::roxygenise(clean=TRUE)
devtools::install(local=TRUE, args = c('--no-lock'))
library(mdine)
tmp
mdine(tmp,tmp,tmp)
tmp = matrix(rpois(100), 50, 2)
tmp = matrix(rpois(100, 10), 50, 2)
tmp
tmp[50,1] = -1
tmp
mdine(tmp,tmp,tmp)
tmp = matrix(rpois(100, 10), 50, 2)
mdine(tmp,tmp,tmp)
mdine(tmp,tmp,c(1,2,3))
mdine(tmp,tmp,c(1,0,1))
mdine(tmp,tmp,c(1,0,1))
roxygen2::roxygenise(clean=TRUE)
devtools::install(local=TRUE, args = c('--no-lock'))
library(mdine)
mdine(tmp,tmp,c(1,0,1))
mdine(tmp,tmp,rep(1, 50))
mdine(tmp,matrix(-1,50,2),rep(1, 50))
mdine(tmp,matrix(-1,49,2),rep(1, 50))
NULL<0
if(NULL<0) print("x")
roxygen2::roxygenise(clean=TRUE)
devtools::install(local=TRUE, args = c('--no-lock'))
warning("asldkfha")
library(mdine)
mdine(tmp[-2,],matrix(-1,50,2),rep(1, 50))
mdine(tmp,matrix(-1,50,2),rep(1, 50), lambda=0)
mdine(tmp,matrix(-1,50,2),rep(1, 50), lambda=-1)
mdine(tmp,matrix(-1,50,2),rep(1, 50), lambda=1)
mdine(tmp,matrix(-1,50,2),rep(1, 50), lambda=0.0000001)
x = NULL
if (!is.null(x) | x<0) print(x)
if (!is.null(x) || x<0) print(x)
if (!is.null(x) && x<0) print(x)
if (is.null(x) || x<0) print(x)
if (is.null(x) || x<0) stop("x must be positive")
if (!is.null(x) || x<0) stop("x must be positive")
func = function(x=c("a","b")) { print(x) }
func()
func = function(x=c("a","b")) { x<-match.arg(x); print(x) }
func()
func("a")
func("b")
func("c")
roxygen2::roxygenise(clean=TRUE)
devtools::install(local=TRUE, args = c('--no-lock'))
library(mdine)
?mdine
?mdine
library(mdine)
?mdine
?lm
library(compositions)
?clr
roxygen2::roxygenise(clean=TRUE)
devtools::install(local=TRUE, args = c('--no-lock'))
?ginv
?MASS::ginv
roxygen2::roxygenise(clean=TRUE)
devtools::install(local=TRUE, args = c('--no-lock'))
roxygen2::roxygenise(clean=TRUE)
devtools::install(local=TRUE, args = c('--no-lock'))
roxygen2::roxygenise(clean=TRUE)
devtools::install(local=TRUE, args = c('--no-lock'))
load("/mnt/GREENWOOD_SCRATCH/kevin.mcgregor/stan_multinom_normal/sim_study_data/n50_otu5_p3/sim_data/sim_rep1.RData")
devtools::install(local=TRUE, args = c('--no-lock'))
devtools::install(local=TRUE, args = c('--no-lock'))
mod = mdine(counts_cc, covars, status, mc.cores=4)
library(mdine)
mod = mdine(counts_cc, covars, status, mc.cores=4)
devtools::install(local=TRUE, args = c('--no-lock'))
library(mdine)
mod = mdine(counts_cc, covars, status, mc.cores=4)
devtools::install(local=TRUE, args = c('--no-lock'))
devtools::install(local=TRUE, args = c('--no-lock'))
library(mdine)
mod = mdine(counts_cc, covars, status, mc.cores=4)
devtools::install(local=TRUE, args = c('--no-lock'))
library(mdine)
mod = mdine(counts_cc, covars, status, mc.cores=4)
mod$post_mean
mod$stan.fit
load("/mnt/GREENWOOD_SCRATCH/kevin.mcgregor/stan_multinom_normal/sim_study_data/n500_otu25_p3/sim_data/sim_rep1.RData")
mod = mdine(counts_cc, covars, status, mc.cores=4)
load("/mnt/GREENWOOD_SCRATCH/kevin.mcgregor/stan_multinom_normal/sim_study_data/n50_otu5_p3/sim_data/sim_rep1.RData")
mod = mdine(counts_cc, covars, status, mc.cores=4)
gc()
roxygen2::roxygenise(clean=TRUE)
devtools::install(local=TRUE, args = c('--no-lock'))
library(mdine)
load("/mnt/GREENWOOD_SCRATCH/kevin.mcgregor/stan_multinom_normal/sim_study_data/n50_otu5_p3/sim_data/sim_rep1.RData")
?mdine
roxygen2::roxygenise(clean=TRUE)
devtools::install(local=TRUE, args = c('--no-lock'))
?mdine
library(mdine)
?mdine
library(glasso)
?glasso
roxygen2::roxygenise(clean=TRUE)
devtools::install(local=TRUE, args = c('--no-lock'))
load("/mnt/GREENWOOD_SCRATCH/kevin.mcgregor/stan_multinom_normal/sim_study_data/n50_otu5_p3/sim_data/sim_rep1.RData")
library(mdine)
mod = mdine(counts_cc, covars, status, mc.cores=4)
?match.arg
devtools::build()
library(mdine)
?get_posterior_mean
?rstan::get_posterior_mean
library(rstan)
?get_posterior_mean
taco$beta = 1
taco=NULL
taco$beta = 1
taco
load("/mnt/GREENWOOD_SCRATCH/kevin.mcgregor/stan_multinom_normal/sim_study_data/n100_otu5_p3/lam_mle_diag/stan_file1.RData")
get_posterior_mean(stan.model.lam.est, pars="beta")
get_posterior_mean(stan.model.lam.est$stan.fit, pars="beta")
get_posterior_mean(stan.model.lam.est$stan.fit, pars="beta")[,"mean-all chains"]
matrix(get_posterior_mean(stan.model.lam.est$stan.fit, "beta")[,"mean-all chains"], p, k, byrow=TRUE)
matrix(get_posterior_mean(stan.model.lam.est$stan.fit, "beta")[,"mean-all chains"], 4, 5, byrow=TRUE)
stan.model.lam.est$stan.fit$n
par_dims(stan.model.lam.est)
stan.model.lam.est$stan.fit$par_dims
stan.model.lam.est$stan.fit@par_dims
stan.model.lam.est$stan.fit@mode
stan.model.lam.est$stan.fit@sim
as.matrix(stan.model.lam.est$stan.fit, pars="beta")
as.matrix(get_posterior_mean(stan.model.lam.est$stan.fit, pars="beta"))
roxygen2::roxygenise(clean=TRUE)
devtools::install(local=TRUE, args = c('--no-lock'))
library(mdine)
load("/mnt/GREENWOOD_SCRATCH/kevin.mcgregor/stan_multinom_normal/sim_study_data/n50_otu5_p3/sim_data/sim_rep1.RData")
mod = mdine(counts_cc, covars, status, mc.cores = 4, iter = 50)
roxygen2::roxygenise(clean=TRUE)
devtools::install(local=TRUE, args = c('--no-lock'))
library(mdine)
mod = mdine(counts_cc, covars, status, mc.cores = 4, iter = 50)
mod$post_mean
traceplot(mod$stan.fit, pars="beta")
traceplot(mod$stan.fit, pars="beta[1,1]", inc_warmup=TRUE)
mod = mdine(counts_cc, covars, status, mc.cores = 4, iter = 500)
traceplot(mod$stan.fit, pars="beta[1,1]", inc_warmup=TRUE)
summary(mod$stan.fit, pars="beta[1,1]")$summary
summary(mod$stan.fit, pars="beta")$summary
summary(mod$stan.fit, pars="invsigma0")$summary
?mdine
?mdine
library(mdine)
?mdine
mdine::mn_model
roxygen2::roxygenise(clean=TRUE)
devtools::install(local=TRUE, args = c('--no-lock'))
library(mdine)
?mdine
roxygen2::roxygenise(clean=TRUE)
devtools::install(local=TRUE, args = c('--no-lock'))
library(mdine)
?mdine
library(mdine)
?mdine
missing(ligdv)
?summary
?summary.stanfit
?get_posterior_mean
load("/mnt/GREENWOOD_SCRATCH/kevin.mcgregor/stan_multinom_normal/sim_study_data/n50_otu5_p3/lam_mle_diag/stan_file1.RData")
summary(stan.model.lam.est$stan.fit, pars="beta", probs=c(0.1,0.9))
library(rstan)
summary(stan.model.lam.est$stan.fit, pars="beta", probs=c(0.1,0.9))
summary(stan.model.lam.est$stan.fit, pars="beta")
summary(stan.model.lam.est$stan.fit, pars="beta", probs=c(0.1,0.9))$summary
summary(stan.model.lam.est$stan.fit, pars="beta", probs=c(0.123,0.911))$summary
quant = c(0.1, 0.9)
quant*100
as.character(quant*100)
paste0(as.character(quant*100),"%")
summary(stan.model.lam.est$stan.fit, pars="beta", probs=quant)$summary[,paste0(as.character(quant*100),"%")]
exp(0.001)
roxygen2::roxygenise(clean=TRUE)
devtools::install(local=TRUE, args = c('--no-lock'))
library(mdine)
load("/mnt/GREENWOOD_SCRATCH/kevin.mcgregor/stan_multinom_normal/sim_study_data/n50_otu5_p3/lam_mle_diag/stan_file1.RData")
mod = mdine(counts_cc, covars, status, mc.cores = 4, iter = 50)
rm(stan.model.lam.est)
load("/mnt/GREENWOOD_SCRATCH/kevin.mcgregor/stan_multinom_normal/sim_study_data/n50_otu5_p3/sim_data/sim_rep1.RData")
mod = mdine(counts_cc, covars, status, mc.cores = 4, iter = 50)
mod$ci
mod
roxygen2::roxygenise(clean=TRUE)
devtools::install(local=TRUE, args = c('--no-lock'))
library(mdine)
load("/mnt/GREENWOOD_SCRATCH/kevin.mcgregor/stan_multinom_normal/sim_study_data/n50_otu5_p3/lam_mle_diag/stan_file1.RData")
mod = mdine(counts_cc, covars, status, mc.cores = 4, iter = 50)
rm(stan.model.lam.est)
load("/mnt/GREENWOOD_SCRATCH/kevin.mcgregor/stan_multinom_normal/sim_study_data/n50_otu5_p3/sim_data/sim_rep1.RData")
mod = mdine(counts_cc, covars, status, mc.cores = 4, iter = 50)
roxygen2::roxygenise(clean=TRUE)
devtools::install(local=TRUE, args = c('--no-lock'))
library(mdine)
mod = mdine(counts_cc, covars, status, mc.cores = 4, iter = 50)
roxygen2::roxygenise(clean=TRUE)
devtools::install(local=TRUE, args = c('--no-lock'))
mod = mdine(counts_cc, covars, status, mc.cores = 4, iter = 50)
roxygen2::roxygenise(clean=TRUE)
devtools::install(local=TRUE, args = c('--no-lock'))
library(mdine)
load("/mnt/GREENWOOD_SCRATCH/kevin.mcgregor/stan_multinom_normal/sim_study_data/n50_otu5_p3/sim_data/sim_rep1.RData")
mod = mdine(counts_cc, covars, status, mc.cores = 4, iter = 50)
mod$post_mean
mod$ci$beta
mod$post_mean$beta
mod$post_mean$invsigma0
mod$ci$invsigma0
mod$ci$invsigma1
eigen(mod$ci$invsigma1$upper)$values
eigen(mod$ci$invsigma0$upper)$values
mod$ci$invsigma_diff
mod$ci$lambda
mod$post_mean$lambda
log2(lambda)
log2(mod$post_mean$lambda)
mod$ci$frob
mod$ci$natcon
load("/mnt/GREENWOOD_SCRATCH/kevin.mcgregor/stan_multinom_normal/sim_study_data/n50_otu5_p3/lam_mle_diag/stan_file1.RData")
get_post_mean_matrix <- function(stan.fit, par) {
dim <- stan.fit@par_dims[[par]]
param_mean <- matrix(rstan::get_posterior_mean(stan.fit, par)[,"mean-all chains"],
dim[1], dim[2], byrow=TRUE)
return(param_mean)
}
get_post_mean_matrix(stan.model.lam.est$stan.fit, par="beta")
get_post_mean_matrix(stan.model.lam.est$stan.fit, par="invsigma0")
get_post_mean_matrix(stan.model.lam.est$stan.fit, par="invsigma1")
get_post_mean_matrix(stan.model.lam.est$stan.fit, par="w")
get_post_mean_matrix(stan.model.lam.est$stan.fit, par="lin_pred_ran")
get_post_mean_matrix(stan.model.lam.est$stan.fit, par="lin_pred_rand")
test = c("a","b","c")
text
test
as.list(test)
list(test)
extract_post_mean <- function(stan.fit, lam.null) {
pars <- c("beta", "invsigma0", "invsigma1", "invsigma_diff", "w", "lin_pred_rand", "probs",
"frob", "natcon")
post_mean <- vector("list", length(pars))
names(post_mean) <- pars
post_mean$lambda <- NULL
if (lam.null) {
pars <- c(pars, lambda)
}
for (par in pars) {
post_mean[[par]] <- get_post_mean_matrix(stan.fit, par)
}
return(post_mean)
}
extract_post_mean(stan.model.lam.est$stan.fit, lam.null=TRUE)
extract_post_mean <- function(stan.fit, lam.null) {
pars <- c("beta", "invsigma0", "invsigma1", "invsigma_diff", "w", "lin_pred_rand", "probs",
"frob", "natcon")
post_mean <- vector("list", length(pars))
names(post_mean) <- pars
post_mean$lambda <- NULL
if (lam.null) {
pars <- c(pars, "lambda")
}
for (par in pars) {
post_mean[[par]] <- get_post_mean_matrix(stan.fit, par)
}
return(post_mean)
}
extract_post_mean(stan.model.lam.est$stan.fit, lam.null=TRUE)
extract_post_mean <- function(stan.fit, lam.null) {
pars <- c("beta", "invsigma0", "invsigma1", "invsigma_diff", "lin_pred_rand", "probs",
"frob", "natcon")
post_mean <- vector("list", length(pars))
names(post_mean) <- pars
post_mean$lambda <- NULL
if (lam.null) {
pars <- c(pars, "lambda")
}
for (par in pars) {
post_mean[[par]] <- get_post_mean_matrix(stan.fit, par)
}
return(post_mean)
}
extract_post_mean(stan.model.lam.est$stan.fit, lam.null=TRUE)
source('/mnt/GREENWOOD_JBOD1/GREENWOOD_BACKUP/home/kevin.mcgregor/my_packages/mdine/R/extract_post_mean.R', echo=TRUE)
extract_post_mean(stan.model.lam.est$stan.fit, lam.null=TRUE)
