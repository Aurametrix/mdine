/*
    mdine is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    mdine is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with mdine.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.17.0

#include <stan/model/model_header.hpp>

namespace model_mn_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_mn_model");
    reader.add_event(134, 134, "end", "model_mn_model");
    return reader;
}

template <typename T0__>
typename boost::math::tools::promote_args<T0__>::type
frobenius_lower(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& y, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 7;
        int mat_dim(0);
        (void) mat_dim;  // dummy to suppress unused var warning

        stan::math::fill(mat_dim, std::numeric_limits<int>::min());
        current_statement_begin__ = 8;
        fun_scalar_t__ f;
        (void) f;  // dummy to suppress unused var warning

        stan::math::initialize(f, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(f,DUMMY_VAR__);


        current_statement_begin__ = 9;
        stan::math::assign(f, 0);
        current_statement_begin__ = 10;
        stan::math::assign(mat_dim, rows(y));
        current_statement_begin__ = 11;
        for (int i = 1; i <= mat_dim; ++i) {

            current_statement_begin__ = 12;
            for (int j = 1; j <= (i - 1); ++j) {

                current_statement_begin__ = 13;
                stan::math::assign(f, (f + fabs(get_base1(y,i,j,"y",1))));
            }
        }
        current_statement_begin__ = 16;
        return stan::math::promote_scalar<fun_return_scalar_t__>(f);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct frobenius_lower_functor__ {
    template <typename T0__>
        typename boost::math::tools::promote_args<T0__>::type
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& y, std::ostream* pstream__) const {
        return frobenius_lower(y, pstream__);
    }
};

template <typename T0__>
typename boost::math::tools::promote_args<T0__>::type
nat_con(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& y, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 19;
        return stan::math::promote_scalar<fun_return_scalar_t__>(log(mean(exp(eigenvalues_sym(fabs(y))))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct nat_con_functor__ {
    template <typename T0__>
        typename boost::math::tools::promote_args<T0__>::type
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& y, std::ostream* pstream__) const {
        return nat_con(y, pstream__);
    }
};

#include <meta_header.hpp>
 class model_mn_model : public prob_grad {
private:
    int n;
    int k;
    int p;
    vector<vector<int> > counts;
    double lam_mle;
    vector_d status;
    vector_d offset;
    matrix_d covars;
    double n_real;
    matrix_d Q_ast;
    matrix_d R_ast;
    matrix_d R_ast_inverse;
    double inv_lam_mle;
public:
    model_mn_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_mn_model(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_mn_model_namespace::model_mn_model";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 23;
            context__.validate_dims("data initialization", "n", "int", context__.to_vec());
            n = int(0);
            vals_i__ = context__.vals_i("n");
            pos__ = 0;
            n = vals_i__[pos__++];
            current_statement_begin__ = 24;
            context__.validate_dims("data initialization", "k", "int", context__.to_vec());
            k = int(0);
            vals_i__ = context__.vals_i("k");
            pos__ = 0;
            k = vals_i__[pos__++];
            current_statement_begin__ = 25;
            context__.validate_dims("data initialization", "p", "int", context__.to_vec());
            p = int(0);
            vals_i__ = context__.vals_i("p");
            pos__ = 0;
            p = vals_i__[pos__++];
            current_statement_begin__ = 26;
            validate_non_negative_index("counts", "n", n);
            validate_non_negative_index("counts", "k", k);
            context__.validate_dims("data initialization", "counts", "int", context__.to_vec(n,k));
            validate_non_negative_index("counts", "n", n);
            validate_non_negative_index("counts", "k", k);
            counts = std::vector<std::vector<int> >(n,std::vector<int>(k,int(0)));
            vals_i__ = context__.vals_i("counts");
            pos__ = 0;
            size_t counts_limit_1__ = k;
            for (size_t i_1__ = 0; i_1__ < counts_limit_1__; ++i_1__) {
                size_t counts_limit_0__ = n;
                for (size_t i_0__ = 0; i_0__ < counts_limit_0__; ++i_0__) {
                    counts[i_0__][i_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 27;
            context__.validate_dims("data initialization", "lam_mle", "double", context__.to_vec());
            lam_mle = double(0);
            vals_r__ = context__.vals_r("lam_mle");
            pos__ = 0;
            lam_mle = vals_r__[pos__++];
            current_statement_begin__ = 28;
            validate_non_negative_index("status", "n", n);
            context__.validate_dims("data initialization", "status", "vector_d", context__.to_vec(n));
            validate_non_negative_index("status", "n", n);
            status = vector_d(static_cast<Eigen::VectorXd::Index>(n));
            vals_r__ = context__.vals_r("status");
            pos__ = 0;
            size_t status_i_vec_lim__ = n;
            for (size_t i_vec__ = 0; i_vec__ < status_i_vec_lim__; ++i_vec__) {
                status[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 29;
            validate_non_negative_index("offset", "n", n);
            context__.validate_dims("data initialization", "offset", "vector_d", context__.to_vec(n));
            validate_non_negative_index("offset", "n", n);
            offset = vector_d(static_cast<Eigen::VectorXd::Index>(n));
            vals_r__ = context__.vals_r("offset");
            pos__ = 0;
            size_t offset_i_vec_lim__ = n;
            for (size_t i_vec__ = 0; i_vec__ < offset_i_vec_lim__; ++i_vec__) {
                offset[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 30;
            validate_non_negative_index("covars", "n", n);
            validate_non_negative_index("covars", "p", p);
            context__.validate_dims("data initialization", "covars", "matrix_d", context__.to_vec(n,p));
            validate_non_negative_index("covars", "n", n);
            validate_non_negative_index("covars", "p", p);
            covars = matrix_d(static_cast<Eigen::VectorXd::Index>(n),static_cast<Eigen::VectorXd::Index>(p));
            vals_r__ = context__.vals_r("covars");
            pos__ = 0;
            size_t covars_m_mat_lim__ = n;
            size_t covars_n_mat_lim__ = p;
            for (size_t n_mat__ = 0; n_mat__ < covars_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < covars_m_mat_lim__; ++m_mat__) {
                    covars(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }

            // validate, data variables
            current_statement_begin__ = 23;
            check_greater_or_equal(function__,"n",n,0);
            current_statement_begin__ = 24;
            check_greater_or_equal(function__,"k",k,0);
            current_statement_begin__ = 25;
            check_greater_or_equal(function__,"p",p,0);
            current_statement_begin__ = 26;
            for (int k0__ = 0; k0__ < n; ++k0__) {
                for (int k1__ = 0; k1__ < k; ++k1__) {
                    check_greater_or_equal(function__,"counts[k0__][k1__]",counts[k0__][k1__],0);
                }
            }
            current_statement_begin__ = 27;
            check_greater_or_equal(function__,"lam_mle",lam_mle,0);
            current_statement_begin__ = 28;
            current_statement_begin__ = 29;
            current_statement_begin__ = 30;
            // initialize data variables
            current_statement_begin__ = 33;
            n_real = double(0);
            stan::math::fill(n_real,DUMMY_VAR__);
            current_statement_begin__ = 34;
            validate_non_negative_index("Q_ast", "n", n);
            validate_non_negative_index("Q_ast", "p", p);
            Q_ast = matrix_d(static_cast<Eigen::VectorXd::Index>(n),static_cast<Eigen::VectorXd::Index>(p));
            stan::math::fill(Q_ast,DUMMY_VAR__);
            current_statement_begin__ = 35;
            validate_non_negative_index("R_ast", "p", p);
            validate_non_negative_index("R_ast", "p", p);
            R_ast = matrix_d(static_cast<Eigen::VectorXd::Index>(p),static_cast<Eigen::VectorXd::Index>(p));
            stan::math::fill(R_ast,DUMMY_VAR__);
            current_statement_begin__ = 36;
            validate_non_negative_index("R_ast_inverse", "p", p);
            validate_non_negative_index("R_ast_inverse", "p", p);
            R_ast_inverse = matrix_d(static_cast<Eigen::VectorXd::Index>(p),static_cast<Eigen::VectorXd::Index>(p));
            stan::math::fill(R_ast_inverse,DUMMY_VAR__);
            current_statement_begin__ = 37;
            inv_lam_mle = double(0);
            stan::math::fill(inv_lam_mle,DUMMY_VAR__);

            current_statement_begin__ = 38;
            stan::math::assign(n_real, n);
            current_statement_begin__ = 39;
            stan::math::assign(Q_ast, multiply(stan::model::rvalue(qr_Q(covars), stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_min_max(1, p), stan::model::nil_index_list())), "qr_Q(covars)"),sqrt((n_real - 1))));
            current_statement_begin__ = 40;
            stan::math::assign(R_ast, divide(stan::model::rvalue(qr_R(covars), stan::model::cons_list(stan::model::index_min_max(1, p), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "qr_R(covars)"),sqrt((n_real - 1))));
            current_statement_begin__ = 41;
            stan::math::assign(R_ast_inverse, inverse(R_ast));
            current_statement_begin__ = 42;
            stan::math::assign(inv_lam_mle, (1 / lam_mle));

            // validate transformed data
            current_statement_begin__ = 33;
            check_greater_or_equal(function__,"n_real",n_real,0);
            current_statement_begin__ = 34;
            current_statement_begin__ = 35;
            current_statement_begin__ = 36;
            current_statement_begin__ = 37;
            check_greater_or_equal(function__,"inv_lam_mle",inv_lam_mle,0);

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 45;
            ++num_params_r__;
            current_statement_begin__ = 46;
        validate_non_negative_index("theta", "p", p);
            validate_non_negative_index("theta", "(k - 1)", (k - 1));
            num_params_r__ += p * (k - 1);
            current_statement_begin__ = 47;
            validate_non_negative_index("lin_pred_rand", "(k - 1)", (k - 1));
            validate_non_negative_index("lin_pred_rand", "n", n);
            num_params_r__ += (k - 1) * n;
            current_statement_begin__ = 48;
            validate_non_negative_index("L0", "(k - 1)", (k - 1));
            validate_non_negative_index("L0", "(k - 1)", (k - 1));
            num_params_r__ += (((k - 1) * ((k - 1) + 1)) / 2 + ((k - 1) - (k - 1)) * (k - 1));
            current_statement_begin__ = 49;
            validate_non_negative_index("L1", "(k - 1)", (k - 1));
            validate_non_negative_index("L1", "(k - 1)", (k - 1));
            num_params_r__ += (((k - 1) * ((k - 1) + 1)) / 2 + ((k - 1) - (k - 1)) * (k - 1));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_mn_model() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("lambda")))
            throw std::runtime_error("variable lambda missing");
        vals_r__ = context__.vals_r("lambda");
        pos__ = 0U;
        context__.validate_dims("initialization", "lambda", "double", context__.to_vec());
        double lambda(0);
        lambda = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,lambda);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable lambda: ") + e.what());
        }

        if (!(context__.contains_r("theta")))
            throw std::runtime_error("variable theta missing");
        vals_r__ = context__.vals_r("theta");
        pos__ = 0U;
        validate_non_negative_index("theta", "p", p);
        validate_non_negative_index("theta", "(k - 1)", (k - 1));
        context__.validate_dims("initialization", "theta", "matrix_d", context__.to_vec(p,(k - 1)));
        matrix_d theta(static_cast<Eigen::VectorXd::Index>(p),static_cast<Eigen::VectorXd::Index>((k - 1)));
        for (int j2__ = 0U; j2__ < (k - 1); ++j2__)
            for (int j1__ = 0U; j1__ < p; ++j1__)
                theta(j1__,j2__) = vals_r__[pos__++];
        try {
            writer__.matrix_unconstrain(theta);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable theta: ") + e.what());
        }

        if (!(context__.contains_r("lin_pred_rand")))
            throw std::runtime_error("variable lin_pred_rand missing");
        vals_r__ = context__.vals_r("lin_pred_rand");
        pos__ = 0U;
        validate_non_negative_index("lin_pred_rand", "n", n);
        validate_non_negative_index("lin_pred_rand", "(k - 1)", (k - 1));
        context__.validate_dims("initialization", "lin_pred_rand", "vector_d", context__.to_vec(n,(k - 1)));
        std::vector<vector_d> lin_pred_rand(n,vector_d(static_cast<Eigen::VectorXd::Index>((k - 1))));
        for (int j1__ = 0U; j1__ < (k - 1); ++j1__)
            for (int i0__ = 0U; i0__ < n; ++i0__)
                lin_pred_rand[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < n; ++i0__)
            try {
            writer__.vector_unconstrain(lin_pred_rand[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable lin_pred_rand: ") + e.what());
        }

        if (!(context__.contains_r("L0")))
            throw std::runtime_error("variable L0 missing");
        vals_r__ = context__.vals_r("L0");
        pos__ = 0U;
        validate_non_negative_index("L0", "(k - 1)", (k - 1));
        validate_non_negative_index("L0", "(k - 1)", (k - 1));
        context__.validate_dims("initialization", "L0", "matrix_d", context__.to_vec((k - 1),(k - 1)));
        matrix_d L0(static_cast<Eigen::VectorXd::Index>((k - 1)),static_cast<Eigen::VectorXd::Index>((k - 1)));
        for (int j2__ = 0U; j2__ < (k - 1); ++j2__)
            for (int j1__ = 0U; j1__ < (k - 1); ++j1__)
                L0(j1__,j2__) = vals_r__[pos__++];
        try {
            writer__.cholesky_factor_unconstrain(L0);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable L0: ") + e.what());
        }

        if (!(context__.contains_r("L1")))
            throw std::runtime_error("variable L1 missing");
        vals_r__ = context__.vals_r("L1");
        pos__ = 0U;
        validate_non_negative_index("L1", "(k - 1)", (k - 1));
        validate_non_negative_index("L1", "(k - 1)", (k - 1));
        context__.validate_dims("initialization", "L1", "matrix_d", context__.to_vec((k - 1),(k - 1)));
        matrix_d L1(static_cast<Eigen::VectorXd::Index>((k - 1)),static_cast<Eigen::VectorXd::Index>((k - 1)));
        for (int j2__ = 0U; j2__ < (k - 1); ++j2__)
            for (int j1__ = 0U; j1__ < (k - 1); ++j1__)
                L1(j1__,j2__) = vals_r__[pos__++];
        try {
            writer__.cholesky_factor_unconstrain(L1);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable L1: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<T__> in__(params_r__,params_i__);

            T__ lambda;
            (void) lambda;  // dummy to suppress unused var warning
            if (jacobian__)
                lambda = in__.scalar_lb_constrain(0,lp__);
            else
                lambda = in__.scalar_lb_constrain(0);

            Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  theta;
            (void) theta;  // dummy to suppress unused var warning
            if (jacobian__)
                theta = in__.matrix_constrain(p,(k - 1),lp__);
            else
                theta = in__.matrix_constrain(p,(k - 1));

            vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > lin_pred_rand;
            size_t dim_lin_pred_rand_0__ = n;
            lin_pred_rand.reserve(dim_lin_pred_rand_0__);
            for (size_t k_0__ = 0; k_0__ < dim_lin_pred_rand_0__; ++k_0__) {
                if (jacobian__)
                    lin_pred_rand.push_back(in__.vector_constrain((k - 1),lp__));
                else
                    lin_pred_rand.push_back(in__.vector_constrain((k - 1)));
            }

            Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  L0;
            (void) L0;  // dummy to suppress unused var warning
            if (jacobian__)
                L0 = in__.cholesky_factor_constrain((k - 1),(k - 1),lp__);
            else
                L0 = in__.cholesky_factor_constrain((k - 1),(k - 1));

            Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  L1;
            (void) L1;  // dummy to suppress unused var warning
            if (jacobian__)
                L1 = in__.cholesky_factor_constrain((k - 1),(k - 1),lp__);
            else
                L1 = in__.cholesky_factor_constrain((k - 1),(k - 1));


            // transformed parameters
            current_statement_begin__ = 56;
            validate_non_negative_index("invsigma0", "(k - 1)", (k - 1));
            Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  invsigma0(static_cast<Eigen::VectorXd::Index>((k - 1)),static_cast<Eigen::VectorXd::Index>((k - 1)));
            (void) invsigma0;  // dummy to suppress unused var warning

            stan::math::initialize(invsigma0, DUMMY_VAR__);
            stan::math::fill(invsigma0,DUMMY_VAR__);
            current_statement_begin__ = 57;
            validate_non_negative_index("invsigma1", "(k - 1)", (k - 1));
            Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  invsigma1(static_cast<Eigen::VectorXd::Index>((k - 1)),static_cast<Eigen::VectorXd::Index>((k - 1)));
            (void) invsigma1;  // dummy to suppress unused var warning

            stan::math::initialize(invsigma1, DUMMY_VAR__);
            stan::math::fill(invsigma1,DUMMY_VAR__);
            current_statement_begin__ = 58;
            validate_non_negative_index("probs", "k", k);
            validate_non_negative_index("probs", "n", n);
            vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > probs(n, (Eigen::Matrix<T__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(k))));
            stan::math::initialize(probs, DUMMY_VAR__);
            stan::math::fill(probs,DUMMY_VAR__);
            current_statement_begin__ = 59;
            T__ invlambda;
            (void) invlambda;  // dummy to suppress unused var warning

            stan::math::initialize(invlambda, DUMMY_VAR__);
            stan::math::fill(invlambda,DUMMY_VAR__);
            current_statement_begin__ = 60;
            T__ lambda_half;
            (void) lambda_half;  // dummy to suppress unused var warning

            stan::math::initialize(lambda_half, DUMMY_VAR__);
            stan::math::fill(lambda_half,DUMMY_VAR__);
            current_statement_begin__ = 61;
            validate_non_negative_index("lin_pred", "(k - 1)", (k - 1));
            validate_non_negative_index("lin_pred", "n", n);
            vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > lin_pred(n, (Eigen::Matrix<T__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>((k - 1)))));
            stan::math::initialize(lin_pred, DUMMY_VAR__);
            stan::math::fill(lin_pred,DUMMY_VAR__);


            current_statement_begin__ = 64;
            for (int i = 1; i <= n; ++i) {

                current_statement_begin__ = 65;
                stan::math::assign(get_base1_lhs(lin_pred,i,"lin_pred",1), transpose(add(multiply(get_base1(covars,i,"covars",1),theta),get_base1(offset,i,"offset",1))));
                current_statement_begin__ = 66;
                stan::math::assign(get_base1_lhs(probs,i,"probs",1), softmax(append_row(get_base1(lin_pred_rand,i,"lin_pred_rand",1),0)));
            }
            current_statement_begin__ = 78;
            stan::math::assign(invsigma0, multiply_lower_tri_self_transpose(L0));
            current_statement_begin__ = 79;
            stan::math::assign(invsigma1, multiply_lower_tri_self_transpose(L1));
            current_statement_begin__ = 81;
            stan::math::assign(invlambda, (1 / lambda));
            current_statement_begin__ = 82;
            stan::math::assign(lambda_half, (lambda / 2));

            // validate transformed parameters
            for (int i0__ = 0; i0__ < (k - 1); ++i0__) {
                for (int i1__ = 0; i1__ < (k - 1); ++i1__) {
                    if (stan::math::is_uninitialized(invsigma0(i0__,i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: invsigma0" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
            for (int i0__ = 0; i0__ < (k - 1); ++i0__) {
                for (int i1__ = 0; i1__ < (k - 1); ++i1__) {
                    if (stan::math::is_uninitialized(invsigma1(i0__,i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: invsigma1" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
            for (int i0__ = 0; i0__ < n; ++i0__) {
                for (int i1__ = 0; i1__ < k; ++i1__) {
                    if (stan::math::is_uninitialized(probs[i0__](i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: probs" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
            if (stan::math::is_uninitialized(invlambda)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: invlambda";
                throw std::runtime_error(msg__.str());
            }
            if (stan::math::is_uninitialized(lambda_half)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: lambda_half";
                throw std::runtime_error(msg__.str());
            }
            for (int i0__ = 0; i0__ < n; ++i0__) {
                for (int i1__ = 0; i1__ < (k - 1); ++i1__) {
                    if (stan::math::is_uninitialized(lin_pred[i0__](i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: lin_pred" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 56;
            stan::math::check_cov_matrix(function__,"invsigma0",invsigma0);
            current_statement_begin__ = 57;
            stan::math::check_cov_matrix(function__,"invsigma1",invsigma1);
            current_statement_begin__ = 58;
            for (int k0__ = 0; k0__ < n; ++k0__) {
                stan::math::check_simplex(function__,"probs[k0__]",probs[k0__]);
            }
            current_statement_begin__ = 59;
            check_greater_or_equal(function__,"invlambda",invlambda,0);
            current_statement_begin__ = 60;
            check_greater_or_equal(function__,"lambda_half",lambda_half,0);
            current_statement_begin__ = 61;

            // model body

            current_statement_begin__ = 86;
            for (int i = 1; i <= n; ++i) {

                current_statement_begin__ = 87;
                lp_accum__.add(multinomial_log<propto__>(get_base1(counts,i,"counts",1), get_base1(probs,i,"probs",1)));
            }
            current_statement_begin__ = 91;
            for (int i = 1; i <= n; ++i) {

                current_statement_begin__ = 92;
                if (as_bool(logical_eq(get_base1(status,i,"status",1),0))) {

                    current_statement_begin__ = 94;
                    lp_accum__.add(multi_normal_prec_log<propto__>(get_base1(lin_pred_rand,i,"lin_pred_rand",1), get_base1(lin_pred,i,"lin_pred",1), invsigma0));
                } else {

                    current_statement_begin__ = 97;
                    lp_accum__.add(multi_normal_prec_log<propto__>(get_base1(lin_pred_rand,i,"lin_pred_rand",1), get_base1(lin_pred,i,"lin_pred",1), invsigma1));
                }
            }
            current_statement_begin__ = 102;
            for (int j1 = 1; j1 <= (k - 1); ++j1) {

                current_statement_begin__ = 104;
                for (int j2 = 1; j2 <= j1; ++j2) {

                    current_statement_begin__ = 105;
                    if (as_bool(logical_eq(j1,j2))) {

                        current_statement_begin__ = 106;
                        lp_accum__.add(exponential_log<propto__>(get_base1(invsigma0,j1,j2,"invsigma0",1), lambda_half));
                        current_statement_begin__ = 107;
                        lp_accum__.add(exponential_log<propto__>(get_base1(invsigma1,j1,j2,"invsigma1",1), lambda_half));
                    } else {

                        current_statement_begin__ = 109;
                        lp_accum__.add(double_exponential_log<propto__>(get_base1(invsigma0,j1,j2,"invsigma0",1), 0, invlambda));
                        current_statement_begin__ = 110;
                        lp_accum__.add(double_exponential_log<propto__>(get_base1(invsigma1,j1,j2,"invsigma1",1), 0, invlambda));
                    }
                }
            }
            current_statement_begin__ = 115;
            for (int j1 = 1; j1 <= p; ++j1) {

                current_statement_begin__ = 116;
                for (int j2 = 1; j2 <= (k - 1); ++j2) {

                    current_statement_begin__ = 117;
                    lp_accum__.add(normal_log<propto__>(get_base1(theta,j1,j2,"theta",1), 0, 10000));
                }
            }
            current_statement_begin__ = 122;
            lp_accum__.add(exponential_log<propto__>(lambda, inv_lam_mle));

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("lambda");
        names__.push_back("theta");
        names__.push_back("lin_pred_rand");
        names__.push_back("L0");
        names__.push_back("L1");
        names__.push_back("invsigma0");
        names__.push_back("invsigma1");
        names__.push_back("probs");
        names__.push_back("invlambda");
        names__.push_back("lambda_half");
        names__.push_back("lin_pred");
        names__.push_back("beta");
        names__.push_back("invsigma_diff");
        names__.push_back("frob");
        names__.push_back("natcon");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(p);
        dims__.push_back((k - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dims__.push_back((k - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((k - 1));
        dims__.push_back((k - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((k - 1));
        dims__.push_back((k - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((k - 1));
        dims__.push_back((k - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((k - 1));
        dims__.push_back((k - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dims__.push_back(k);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dims__.push_back((k - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(p);
        dims__.push_back((k - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((k - 1));
        dims__.push_back((k - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_mn_model_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double lambda = in__.scalar_lb_constrain(0);
        matrix_d theta = in__.matrix_constrain(p,(k - 1));
        vector<vector_d> lin_pred_rand;
        size_t dim_lin_pred_rand_0__ = n;
        for (size_t k_0__ = 0; k_0__ < dim_lin_pred_rand_0__; ++k_0__) {
            lin_pred_rand.push_back(in__.vector_constrain((k - 1)));
        }
        matrix_d L0 = in__.cholesky_factor_constrain((k - 1),(k - 1));
        matrix_d L1 = in__.cholesky_factor_constrain((k - 1),(k - 1));
        vars__.push_back(lambda);
            for (int k_1__ = 0; k_1__ < (k - 1); ++k_1__) {
                for (int k_0__ = 0; k_0__ < p; ++k_0__) {
                vars__.push_back(theta(k_0__, k_1__));
                }
            }
            for (int k_1__ = 0; k_1__ < (k - 1); ++k_1__) {
                for (int k_0__ = 0; k_0__ < n; ++k_0__) {
                vars__.push_back(lin_pred_rand[k_0__][k_1__]);
                }
            }
            for (int k_1__ = 0; k_1__ < (k - 1); ++k_1__) {
                for (int k_0__ = 0; k_0__ < (k - 1); ++k_0__) {
                vars__.push_back(L0(k_0__, k_1__));
                }
            }
            for (int k_1__ = 0; k_1__ < (k - 1); ++k_1__) {
                for (int k_0__ = 0; k_0__ < (k - 1); ++k_0__) {
                vars__.push_back(L1(k_0__, k_1__));
                }
            }

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            current_statement_begin__ = 56;
            validate_non_negative_index("invsigma0", "(k - 1)", (k - 1));
            matrix_d invsigma0(static_cast<Eigen::VectorXd::Index>((k - 1)),static_cast<Eigen::VectorXd::Index>((k - 1)));
            (void) invsigma0;  // dummy to suppress unused var warning

            stan::math::initialize(invsigma0, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(invsigma0,DUMMY_VAR__);
            current_statement_begin__ = 57;
            validate_non_negative_index("invsigma1", "(k - 1)", (k - 1));
            matrix_d invsigma1(static_cast<Eigen::VectorXd::Index>((k - 1)),static_cast<Eigen::VectorXd::Index>((k - 1)));
            (void) invsigma1;  // dummy to suppress unused var warning

            stan::math::initialize(invsigma1, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(invsigma1,DUMMY_VAR__);
            current_statement_begin__ = 58;
            validate_non_negative_index("probs", "k", k);
            validate_non_negative_index("probs", "n", n);
            vector<vector_d> probs(n, (vector_d(static_cast<Eigen::VectorXd::Index>(k))));
            stan::math::initialize(probs, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(probs,DUMMY_VAR__);
            current_statement_begin__ = 59;
            double invlambda(0.0);
            (void) invlambda;  // dummy to suppress unused var warning

            stan::math::initialize(invlambda, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(invlambda,DUMMY_VAR__);
            current_statement_begin__ = 60;
            double lambda_half(0.0);
            (void) lambda_half;  // dummy to suppress unused var warning

            stan::math::initialize(lambda_half, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(lambda_half,DUMMY_VAR__);
            current_statement_begin__ = 61;
            validate_non_negative_index("lin_pred", "(k - 1)", (k - 1));
            validate_non_negative_index("lin_pred", "n", n);
            vector<vector_d> lin_pred(n, (vector_d(static_cast<Eigen::VectorXd::Index>((k - 1)))));
            stan::math::initialize(lin_pred, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(lin_pred,DUMMY_VAR__);


            current_statement_begin__ = 64;
            for (int i = 1; i <= n; ++i) {

                current_statement_begin__ = 65;
                stan::math::assign(get_base1_lhs(lin_pred,i,"lin_pred",1), transpose(add(multiply(get_base1(covars,i,"covars",1),theta),get_base1(offset,i,"offset",1))));
                current_statement_begin__ = 66;
                stan::math::assign(get_base1_lhs(probs,i,"probs",1), softmax(append_row(get_base1(lin_pred_rand,i,"lin_pred_rand",1),0)));
            }
            current_statement_begin__ = 78;
            stan::math::assign(invsigma0, multiply_lower_tri_self_transpose(L0));
            current_statement_begin__ = 79;
            stan::math::assign(invsigma1, multiply_lower_tri_self_transpose(L1));
            current_statement_begin__ = 81;
            stan::math::assign(invlambda, (1 / lambda));
            current_statement_begin__ = 82;
            stan::math::assign(lambda_half, (lambda / 2));

            // validate transformed parameters
            current_statement_begin__ = 56;
            stan::math::check_cov_matrix(function__,"invsigma0",invsigma0);
            current_statement_begin__ = 57;
            stan::math::check_cov_matrix(function__,"invsigma1",invsigma1);
            current_statement_begin__ = 58;
            for (int k0__ = 0; k0__ < n; ++k0__) {
                stan::math::check_simplex(function__,"probs[k0__]",probs[k0__]);
            }
            current_statement_begin__ = 59;
            check_greater_or_equal(function__,"invlambda",invlambda,0);
            current_statement_begin__ = 60;
            check_greater_or_equal(function__,"lambda_half",lambda_half,0);
            current_statement_begin__ = 61;

            // write transformed parameters
            for (int k_1__ = 0; k_1__ < (k - 1); ++k_1__) {
                for (int k_0__ = 0; k_0__ < (k - 1); ++k_0__) {
                vars__.push_back(invsigma0(k_0__, k_1__));
                }
            }
            for (int k_1__ = 0; k_1__ < (k - 1); ++k_1__) {
                for (int k_0__ = 0; k_0__ < (k - 1); ++k_0__) {
                vars__.push_back(invsigma1(k_0__, k_1__));
                }
            }
            for (int k_1__ = 0; k_1__ < k; ++k_1__) {
                for (int k_0__ = 0; k_0__ < n; ++k_0__) {
                vars__.push_back(probs[k_0__][k_1__]);
                }
            }
        vars__.push_back(invlambda);
        vars__.push_back(lambda_half);
            for (int k_1__ = 0; k_1__ < (k - 1); ++k_1__) {
                for (int k_0__ = 0; k_0__ < n; ++k_0__) {
                vars__.push_back(lin_pred[k_0__][k_1__]);
                }
            }

            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 125;
            validate_non_negative_index("beta", "p", p);
            validate_non_negative_index("beta", "(k - 1)", (k - 1));
            matrix_d beta(static_cast<Eigen::VectorXd::Index>(p),static_cast<Eigen::VectorXd::Index>((k - 1)));
            (void) beta;  // dummy to suppress unused var warning

            stan::math::initialize(beta, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(beta,DUMMY_VAR__);
            current_statement_begin__ = 126;
            validate_non_negative_index("invsigma_diff", "(k - 1)", (k - 1));
            validate_non_negative_index("invsigma_diff", "(k - 1)", (k - 1));
            matrix_d invsigma_diff(static_cast<Eigen::VectorXd::Index>((k - 1)),static_cast<Eigen::VectorXd::Index>((k - 1)));
            (void) invsigma_diff;  // dummy to suppress unused var warning

            stan::math::initialize(invsigma_diff, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(invsigma_diff,DUMMY_VAR__);
            current_statement_begin__ = 127;
            double frob(0.0);
            (void) frob;  // dummy to suppress unused var warning

            stan::math::initialize(frob, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(frob,DUMMY_VAR__);
            current_statement_begin__ = 128;
            double natcon(0.0);
            (void) natcon;  // dummy to suppress unused var warning

            stan::math::initialize(natcon, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(natcon,DUMMY_VAR__);


            current_statement_begin__ = 130;
            stan::math::assign(beta, multiply(R_ast_inverse,theta));
            current_statement_begin__ = 131;
            stan::math::assign(invsigma_diff, subtract(invsigma1,invsigma0));
            current_statement_begin__ = 132;
            stan::math::assign(frob, (frobenius_lower(invsigma1, pstream__) - frobenius_lower(invsigma0, pstream__)));
            current_statement_begin__ = 133;
            stan::math::assign(natcon, (nat_con(invsigma1, pstream__) - nat_con(invsigma0, pstream__)));

            // validate generated quantities
            current_statement_begin__ = 125;
            current_statement_begin__ = 126;
            current_statement_begin__ = 127;
            current_statement_begin__ = 128;

            // write generated quantities
            for (int k_1__ = 0; k_1__ < (k - 1); ++k_1__) {
                for (int k_0__ = 0; k_0__ < p; ++k_0__) {
                vars__.push_back(beta(k_0__, k_1__));
                }
            }
            for (int k_1__ = 0; k_1__ < (k - 1); ++k_1__) {
                for (int k_0__ = 0; k_0__ < (k - 1); ++k_0__) {
                vars__.push_back(invsigma_diff(k_0__, k_1__));
                }
            }
        vars__.push_back(frob);
        vars__.push_back(natcon);

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_mn_model";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "lambda";
        param_names__.push_back(param_name_stream__.str());
        for (int k_1__ = 1; k_1__ <= (k - 1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= p; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= (k - 1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= n; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lin_pred_rand" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= (k - 1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= (k - 1); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "L0" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= (k - 1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= (k - 1); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "L1" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_1__ = 1; k_1__ <= (k - 1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= (k - 1); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "invsigma0" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= (k - 1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= (k - 1); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "invsigma1" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= k; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= n; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "probs" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "invlambda";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lambda_half";
        param_names__.push_back(param_name_stream__.str());
        for (int k_1__ = 1; k_1__ <= (k - 1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= n; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lin_pred" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
        for (int k_1__ = 1; k_1__ <= (k - 1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= p; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= (k - 1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= (k - 1); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "invsigma_diff" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "frob";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "natcon";
        param_names__.push_back(param_name_stream__.str());
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "lambda";
        param_names__.push_back(param_name_stream__.str());
        for (int k_1__ = 1; k_1__ <= (k - 1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= p; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= (k - 1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= n; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lin_pred_rand" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= ((((k - 1) * ((k - 1) + 1)) / 2) + (((k - 1) - (k - 1)) * (k - 1))); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "L0" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= ((((k - 1) * ((k - 1) + 1)) / 2) + (((k - 1) - (k - 1)) * (k - 1))); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "L1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= ((k - 1) + (((k - 1) * ((k - 1) - 1)) / 2)); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "invsigma0" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= ((k - 1) + (((k - 1) * ((k - 1) - 1)) / 2)); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "invsigma1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= (k - 1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= n; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "probs" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "invlambda";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lambda_half";
        param_names__.push_back(param_name_stream__.str());
        for (int k_1__ = 1; k_1__ <= (k - 1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= n; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lin_pred" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
        for (int k_1__ = 1; k_1__ <= (k - 1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= p; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= (k - 1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= (k - 1); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "invsigma_diff" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "frob";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "natcon";
        param_names__.push_back(param_name_stream__.str());
    }

}; // model

}

typedef model_mn_model_namespace::model_mn_model stan_model;


#endif
